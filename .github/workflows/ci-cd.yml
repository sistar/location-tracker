name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.13'
  AWS_REGION: eu-central-1

jobs:
  # Backend unit tests (safe for all PRs including Dependabot)
  backend-unit-test:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-unit-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-unit-
          
    - name: Install unit test dependencies
      run: |
        poetry install --only unit
        
    - name: Run unit tests
      run: |
        poetry run pytest tests/unit/ -v --tb=short
      env:
        AWS_DEFAULT_REGION: us-east-1
        AWS_ACCESS_KEY_ID: dummy
        AWS_SECRET_ACCESS_KEY: dummy

  # Backend integration tests (requires AWS credentials, skipped for Dependabot)
  backend-integration-test:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    defaults:
      run:
        working-directory: ./backend
    
    env:
      AWS_DEFAULT_REGION: eu-central-1
      AWS_REGION: eu-central-1
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-integration-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-integration-
          
    - name: Install integration test dependencies
      run: |
        poetry install --with integration
        
    - name: Configure AWS credentials for testing
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
        
    - name: Run integration tests with coverage
      run: |
        poetry run pytest tests/integration/ -v --cov=src/handlers --cov-report=term-missing --cov-report=html --cov-report=xml
      env:
        AWS_DEFAULT_REGION: eu-central-1
        AWS_REGION: eu-central-1
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-html
        path: ./backend/htmlcov/

  # Frontend Testing Job
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Build frontend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: ./frontend/dist/

  # Backend Deployment Job
  backend-deploy:
    name: Deploy Backend
    needs: [backend-unit-test, backend-integration-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        working-directory: ./backend
    
    strategy:
      matrix:
        stage: [dev, prod]
        
    environment:
      name: ${{ matrix.stage }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
        
    - name: Install backend dependencies
      run: |
        npm ci
        poetry install
        
    - name: Install Serverless Framework
      run: npm install -g serverless
      
    - name: Create .env file for serverless-dotenv-plugin
      run: |
        touch .env
        
    - name: Set Serverless Framework environment
      run: |
        echo "Serverless Framework v4 uses AWS credentials from environment"
      env:
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
        
    - name: Create deployment bucket if it doesn't exist
      run: |
        BUCKET_NAME="location-backend-sls-deployments-${{ matrix.stage }}"
        if ! aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
          echo "Bucket $BUCKET_NAME already exists"
        else
          echo "Creating deployment bucket: $BUCKET_NAME"
          aws s3 mb "s3://$BUCKET_NAME" --region eu-central-1
          aws s3api put-public-access-block \
            --bucket "$BUCKET_NAME" \
            --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
        fi
        
    - name: Deploy to ${{ matrix.stage }}
      run: |
        serverless deploy --stage ${{ matrix.stage }} --region eu-central-1
      env:
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: eu-central-1
        
    - name: Get deployment info
      id: deployment-info
      run: |
        echo "api_endpoint=$(serverless info --stage ${{ matrix.stage }} --region eu-central-1 | grep 'ApiEndpoint:' | awk '{print $2}')" >> $GITHUB_OUTPUT
      env:
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: eu-central-1
        


  # Frontend Deployment Job
  frontend-deploy:
    name: Deploy Frontend
    needs: [frontend-test, backend-deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        working-directory: ./frontend
    
    strategy:
      matrix:
        stage: [dev, prod]
        
    environment:
      name: ${{ matrix.stage }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Set environment variables
      run: |
        if [ "${{ matrix.stage }}" = "dev" ]; then
          echo "VITE_API_BASE_URL=${{ secrets.DEV_API_BASE_URL }}" > .env.production
        else
          echo "VITE_API_BASE_URL=${{ secrets.PROD_API_BASE_URL }}" > .env.production
        fi
        
    - name: Build frontend
      run: npm run build
      
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: --prod

  # Security Scanning Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Testing Job
  performance-test:
    name: Performance Test
    needs: [backend-deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run API performance tests
      run: |
        # Install k6 for load testing
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
        # Run basic performance test
        k6 run --vus 10 --duration 30s - <<EOF
        import http from 'k6/http';
        export default function() {
          http.get('${{ secrets.DEV_API_BASE_URL }}/vehicles');
        }
        EOF
