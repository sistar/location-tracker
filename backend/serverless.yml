# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: sistar
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: location-backend
service: location-backend

plugins:
 - serverless-python-requirements
 - serverless-dotenv-plugin

custom:
  pythonRequirements:
    usePoetry: true
    poetryWithoutUrls: true
    dockerizePip: false
    slim: true
    strip: false


provider:
  name: aws
  runtime: python3.13
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  httpApi:
    cors: true
  deploymentBucket:
    name: location-backend-sls-deployments-${self:provider.stage}
    blockPublicAccess: true
  environment:
    # Reflecting actual table names currently in AWS
    DYNAMODB_LOCATIONS_TABLE: gps-tracking-service-${self:provider.stage}-locations-v2
    DYNAMODB_LOCATIONS_LOGS_TABLE: gps-tracking-service-${self:provider.stage}-locations-logs-v2
    DYNAMODB_GEOCODE_CACHE_TABLE: gps-tracking-service-${self:provider.stage}-geocode-cache
    ALLOWED_ORIGINS: "https://location-tracker-frontend-3otub3v05-ralf-sigmunds-projects.vercel.app,https://location-tracker-frontend-2wb9fwawo-ralf-sigmunds-projects.vercel.app,https://location-tracker-frontend-61vzbtt0b-ralf-sigmunds-projects.vercel.app,http://localhost:3000,http://localhost:5173,*"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            # Current v2 tables
            - "arn:aws:dynamodb:${self:provider.region}:*:table/gps-tracking-service-${self:provider.stage}-locations-v2"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/gps-tracking-service-${self:provider.stage}-locations-logs-v2"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/gps-tracking-service-${self:provider.stage}-locations-logs-v2/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_GEOCODE_CACHE_TABLE}"
            # Legacy tables without v2 suffix (for backward compatibility)
            - "arn:aws:dynamodb:${self:provider.region}:*:table/gps-tracking-service-${self:provider.stage}-locations"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/gps-tracking-service-${self:provider.stage}-locations-logs"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: "arn:aws:lambda:${self:provider.region}:*:function:${self:service}-${self:provider.stage}-*"
functions:
  processLocationData:
    handler: src/handlers/processor.process_location
    timeout: 300  # 5 minutes for batch processing
    events:
      - httpApi:
          path: /process-gps
          method: post
  getLatestLocation:
    handler: src/handlers/get_latest_location.handler
    events:
      - httpApi:
          path: /location/latest
          method: get
  getLocationHistory:
    handler: src/handlers/get_location_history.handler
    events:
      - httpApi:
          path: /location/history
          method: get
  getDynamicLocationHistory:
    handler: src/handlers/get_dynamic_location_history.handler
    events:
      - httpApi:
          path: /location/dynamic-history
          method: get
  getRawLocationHistory:
    handler: src/handlers/get_raw_location_history.handler
    events:
      - httpApi:
          path: /location/raw-history
          method: get
  saveDriversLog:
    handler: src/handlers/save_drivers_log.handler
    events:
      - httpApi:
          path: /drivers-log
          method: post
      - httpApi:
          path: /drivers-log
          method: get
      - httpApi:
          path: /drivers-log
          method: head
  getDriversLogs:
    handler: src/handlers/get_drivers_logs.handler
    events:
      - httpApi:
          path: /drivers-logs
          method: get
      - httpApi:
          path: /drivers-logs
          method: options
          
  testDriversLogs:
    handler: src/handlers/test_drivers_logs.handler
    events:
      - httpApi:
          path: /test-drivers-logs
          method: get
  geocodeService:
    handler: src/handlers/geocode_service.handler
    events:
      - httpApi:
          path: /geocode
          method: get
      - httpApi:
          path: /geocode
          method: post
  getVehicleIds:
    handler: src/handlers/get_vehicle_ids.handler
    events:
      - httpApi:
          path: /vehicles
          method: get
  scanUnsavedSessions:
    handler: src/handlers/scan_unsaved_sessions.handler
    events:
      - httpApi:
          path: /scan-sessions
          method: get
resources:
  Outputs:
    ApiEndpoint:
      Description: "API Gateway endpoint URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - !Ref HttpApi
            - ".execute-api.${self:provider.region}.amazonaws.com"
  Resources:
    # Create new tables with -v2 suffix for epoch timestamp schema
    LocationsTableV2:
      Type: AWS::DynamoDB::Table
      Properties:
        # Using just the v2 suffix to avoid double v2-v2 from being created
        TableName: gps-tracking-service-${self:provider.stage}-locations-v2
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
            
    LocationsLogsTableV2:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: gps-tracking-service-${self:provider.stage}-locations-logs-v2
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
          - AttributeName: vehicleId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: VehicleTimestampIndex
            KeySchema:
              - AttributeName: vehicleId
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            
    GeocodeCacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_GEOCODE_CACHE_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: query
            AttributeType: S
        KeySchema:
          - AttributeName: query
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expires_at
          Enabled: true
    VehicleLocationRule:
      Type: AWS::IoT::TopicRule
      Properties:
        RuleName: VehicleLocationProcessor${self:provider.stage}
        TopicRulePayload:
          Sql: "SELECT * FROM '+/location'"
          Actions:
            - Lambda:
                FunctionArn: !GetAtt ProcessLocationDataLambdaFunction.Arn
          RuleDisabled: false
          AwsIotSqlVersion: "2016-03-23"
    # Lambda permission for IoT
    ProcessLocationDataLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt ProcessLocationDataLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: iot.amazonaws.com
        SourceArn: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:rule/VehicleLocationProcessor${self:provider.stage}"
